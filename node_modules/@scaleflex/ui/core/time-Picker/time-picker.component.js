import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["position", "size", "popperOptions", "InputProps", "readOnly", "fullWidth", "inputGroupProps", "hint", "label", "onChange"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useState, useRef } from 'react';
import PT from 'prop-types';
import Clock from '@scaleflex/icons/clock';
import { InputSize } from '../../utils/types';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { propTypes as inputPropTypes } from '../input/input.component';
import Popper, { propTypes as popperPropTypes } from '../popper/popper.component';
import { Position } from '../popper/types';
import Styled from './time-picker.styles';
var AM = 'AM';
var PM = 'PM';
var TimePicker = intrinsicComponent(function (_ref, ref) {
  var position = _ref.position,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    popperOptions = _ref.popperOptions,
    InputPropsData = _ref.InputProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? true : _ref$readOnly,
    fullWidth = _ref.fullWidth,
    inputGroupProps = _ref.inputGroupProps,
    hint = _ref.hint,
    label = _ref.label,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(''),
    _useState4 = _slicedToArray(_useState3, 2),
    time = _useState4[0],
    setTime = _useState4[1];
  var _useState5 = useState('01'),
    _useState6 = _slicedToArray(_useState5, 2),
    selectedHour = _useState6[0],
    setSelectedHour = _useState6[1];
  var _useState7 = useState('00'),
    _useState8 = _slicedToArray(_useState7, 2),
    selectedMinute = _useState8[0],
    setSelectedMinute = _useState8[1];
  var _useState9 = useState(AM),
    _useState10 = _slicedToArray(_useState9, 2),
    selectedPeriod = _useState10[0],
    setSelectedPeriod = _useState10[1];
  var timePickerRef = useRef(null);
  var getFormattedHour = function getFormattedHour(hour) {
    return hour < 10 ? "0".concat(hour) : "".concat(hour);
  };
  var getFormattedMinute = function getFormattedMinute(minute) {
    return minute < 10 ? "0".concat(minute) : "".concat(minute);
  };
  var toggleDropdown = function toggleDropdown() {
    setOpen(!open);
  };
  var handleHourChange = function handleHourChange(hour, event) {
    var formattedHour = getFormattedHour(hour);
    var _time$split = time.split(':'),
      _time$split2 = _slicedToArray(_time$split, 1),
      hourString = _time$split2[0];
    var hourValue = formattedHour;
    if (Number.parseInt(hourString, 10) > 10) {
      hourValue = "".concat(hour + 12);
    }
    var updatedTime = "".concat(hourValue, ":").concat(selectedMinute);
    setSelectedHour(formattedHour);
    setTime(updatedTime);
    if (typeof onChange === 'function') {
      onChange(event, updatedTime);
    }
  };
  var handleMinuteChange = function handleMinuteChange(minute, event) {
    var formattedMinute = getFormattedMinute(minute);
    var _time$split3 = time.split(':'),
      _time$split4 = _slicedToArray(_time$split3, 1),
      hourString = _time$split4[0];
    var updatedHour = hourString || selectedHour;
    var updatedTime = "".concat(updatedHour, ":").concat(formattedMinute);
    setSelectedMinute(formattedMinute);
    setTime(updatedTime);
    if (typeof onChange === 'function') {
      onChange(event, updatedTime);
    }
  };
  var handlePeriodChange = function handlePeriodChange(period, event) {
    var hour = period === PM ? Number.parseInt(selectedHour, 10) + 12 : selectedHour;
    var updatedTime = "".concat(hour, ":").concat(selectedMinute);
    setTime(updatedTime);
    setSelectedPeriod(period);
    if (typeof onChange === 'function') {
      onChange(event, updatedTime);
    }
  };
  var handleTimeChange = function handleTimeChange(event) {
    var timeString = event.target.value;
    var _timeString$split = timeString.split(':'),
      _timeString$split2 = _slicedToArray(_timeString$split, 2),
      hourString = _timeString$split2[0],
      minuteString = _timeString$split2[1];
    var hour = Number.parseInt(hourString, 10);
    setTime(timeString);
    setSelectedMinute(minuteString);
    if (hour > 12) {
      setSelectedHour("".concat(hour - 12 < 10 ? '0' : '').concat(hour - 12));
      setSelectedPeriod(PM);
    } else {
      setSelectedPeriod(AM);
      setSelectedHour(hourString);
    }
    if (typeof onChange === 'function') {
      onChange(event, time);
    }
  };
  return /*#__PURE__*/React.createElement(Styled.TimePicker, {
    ref: timePickerRef,
    fullWidth: fullWidth
  }, /*#__PURE__*/React.createElement(Styled.TimePickerInput, _extends({
    label: label,
    fullWidth: fullWidth,
    hint: hint,
    size: size,
    value: time,
    onChange: handleTimeChange,
    readOnly: readOnly,
    hideCopyIcon: true,
    inputProps: _objectSpread({
      iconEnd: function iconEnd() {
        return /*#__PURE__*/React.createElement(Styled.TimePickerIconButton, {
          size: size,
          color: "basic"
        }, /*#__PURE__*/React.createElement(Clock, {
          size: size === 'md' ? 16 : 14
        }));
      },
      iconClickEnd: toggleDropdown,
      type: 'time'
    }, InputPropsData || {})
  }, inputGroupProps, {
    ref: ref
  }, rest)), /*#__PURE__*/React.createElement(Popper, {
    anchorEl: timePickerRef.current,
    onClick: toggleDropdown,
    open: open,
    popperOptions: popperOptions,
    position: position || 'bottom-start',
    overlay: true
  }, open && /*#__PURE__*/React.createElement(Styled.TimePickerDropdownContainer, null, /*#__PURE__*/React.createElement(Styled.TimePickerDropdown, null, /*#__PURE__*/React.createElement(Styled.TimePickerDropdownColumn, null, _toConsumableArray(new Array(12).keys()).map(function (hour) {
    return /*#__PURE__*/React.createElement(Styled.TimePickerHour, {
      selected: selectedHour === getFormattedHour(hour + 1),
      key: hour,
      onClick: function onClick(event) {
        return handleHourChange(hour + 1, event);
      }
    }, hour + 1);
  })), /*#__PURE__*/React.createElement(Styled.TimePickerDropdownColumn, null, _toConsumableArray(new Array(60).keys()).map(function (minute) {
    return /*#__PURE__*/React.createElement(Styled.TimePickerMinute, {
      selected: selectedMinute === getFormattedMinute(minute),
      key: minute,
      onClick: function onClick(event) {
        return handleMinuteChange(minute, event);
      }
    }, getFormattedMinute(minute));
  }))), /*#__PURE__*/React.createElement(Styled.TimePickerDropdownColumn, null, /*#__PURE__*/React.createElement(Styled.TimePickerPeriod, {
    selected: selectedPeriod === AM,
    onClick: function onClick(event) {
      return handlePeriodChange(AM, event);
    }
  }, "AM"), /*#__PURE__*/React.createElement(Styled.TimePickerPeriod, {
    selected: selectedPeriod === PM,
    onClick: function onClick(event) {
      return handlePeriodChange(PM, event);
    }
  }, "PM")))));
});
TimePicker.defaultProps = {
  size: InputSize.Md,
  disabled: false,
  readOnly: true,
  fullWidth: false
};
export var propTypes = {
  position: PT.oneOf(objectValues(Position)),
  size: PT.oneOf(objectValues(InputSize)),
  popperOptions: popperPropTypes.popperOptions,
  InputProps: PT.exact(inputPropTypes),
  fullWidth: PT.bool,
  onChange: PT.func
};
TimePicker.propTypes = propTypes;
export default TimePicker;