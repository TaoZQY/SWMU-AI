import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "onChange", "value", "icon", "size", "MenuProps", "readOnly", "disabled", "renderLabel", "multiple"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useState } from 'react';
import PT from 'prop-types';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import Arrow from '../arrow';
import Menu from '../menu';
import { renderValue, renderOption } from '../select/select.utils';
import { propTypes as selectPropTypes } from '../select/select.component';
import Styled from './input-localization.styles';
import { InputSize } from '../../utils/types';
import { getIconSize, getArrowSize } from './input-localization.utils';
var InputLocalization = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    onChange = _ref.onChange,
    value = _ref.value,
    icon = _ref.icon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Sm : _ref$size,
    MenuProps = _ref.MenuProps,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    renderLabel = _ref.renderLabel,
    multiple = _ref.multiple,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var open = Boolean(anchorEl);
  var handleClick = function handleClick(event) {
    return setAnchorEl(event.currentTarget);
  };
  var handleClose = function handleClose() {
    return setAnchorEl(undefined);
  };
  return /*#__PURE__*/React.createElement(Styled.Container, _extends({}, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Styled.InputLocalization, {
    size: size,
    disabled: disabled,
    onClick: disabled || readOnly ? undefined : handleClick
  }, icon && /*#__PURE__*/React.createElement(Styled.Icon, null, typeof icon === 'function' ? icon({
    size: getIconSize(size)
  }) : icon), /*#__PURE__*/React.createElement(Styled.Label, null, typeof renderLabel === 'function' ? renderLabel(value) : renderValue({
    value: value,
    children: children,
    multiple: multiple
  })), /*#__PURE__*/React.createElement(Styled.Icon, null, /*#__PURE__*/React.createElement(Arrow, {
    type: open ? 'top' : 'bottom',
    IconProps: {
      size: getArrowSize(size)
    }
  }))), /*#__PURE__*/React.createElement(Menu, _extends({
    anchorEl: anchorEl,
    open: open,
    onClose: handleClose
  }, MenuProps), React.Children.map(children, function (child) {
    return renderOption(child, {
      value: value,
      multiple: multiple,
      size: size,
      onClose: handleClose,
      onChange: disabled || readOnly ? undefined : onChange
    });
  })));
});
InputLocalization.defaultProps = {};
var error = selectPropTypes.error,
  size = selectPropTypes.size,
  restSelectPropTypes = _objectWithoutProperties(selectPropTypes, ["error", "size"]);
InputLocalization.propTypes = _objectSpread(_objectSpread({}, restSelectPropTypes), {}, {
  icon: PT.node,
  size: PT.oneOf(objectValues(InputSize)),
  readOnly: PT.bool,
  disabled: PT.bool
});
export default InputLocalization;