import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["autoHideDuration", "anchorOrigin", "open", "onClose"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import PT from 'prop-types';
import { intrinsicComponent, objectValues, generateClassNames } from '../../utils/functions';
import usePortal from '../../hooks/use-portal';
import PopupContent, { defaultProps as cDefaultProps, propTypes as cPropTypes } from '../popup-content/popup-content.component';
import { Horizontal, Vertical } from './types';
import Styled from './popup.styles';
var Popup = intrinsicComponent(function (props, ref) {
  var autoHideDuration = props.autoHideDuration,
    anchorOrigin = props.anchorOrigin,
    open = props.open,
    onClose = props.onClose,
    rest = _objectWithoutProperties(props, _excluded);
  var target = usePortal(generateClassNames('Popup'));
  var _useState = useState(autoHideDuration),
    _useState2 = _slicedToArray(_useState, 2),
    hoverHideDuration = _useState2[0],
    setHoverHideDuration = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHovering = _useState4[0],
    setIsHovering = _useState4[1];
  var handleMouseLeave = function handleMouseLeave() {
    setIsHovering(false);
    setHoverHideDuration(1000);
  };
  useEffect(function () {
    if (open) setHoverHideDuration(autoHideDuration);
  }, [open]);
  useEffect(function () {
    var timeout = null;
    if (open && !isHovering && hoverHideDuration && typeof onClose === 'function') {
      timeout = setTimeout(onClose, hoverHideDuration);
    }
    return function () {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [hoverHideDuration, isHovering, open, onClose]);
  var render = function render() {
    if (!open) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled.Popup, _extends({
      onMouseEnter: function onMouseEnter() {
        return setIsHovering(true);
      },
      onMouseLeave: handleMouseLeave
    }, props), /*#__PURE__*/React.createElement(PopupContent, _extends({
      onClose: onClose
    }, rest, {
      ref: ref
    })));
  };
  return /*#__PURE__*/createPortal(render(), target);
});
Popup.defaultProps = _objectSpread(_objectSpread({}, cDefaultProps), {}, {
  open: false,
  autoHideDuration: 5000,
  anchorOrigin: {
    vertical: Vertical.Bottom,
    horizontal: Horizontal.Left
  }
});
Popup.propTypes = _objectSpread(_objectSpread({}, cPropTypes), {}, {
  anchorOrigin: PT.exact({
    vertical: PT.oneOf(objectValues(Vertical)),
    horizontal: PT.oneOf(objectValues(Horizontal))
  }),
  open: PT.bool,
  autoHideDuration: PT.number,
  onClose: PT.func
});
export default Popup;