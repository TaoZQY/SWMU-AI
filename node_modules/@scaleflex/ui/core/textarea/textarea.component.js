import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["fullWidth", "size", "value", "readOnly", "disabled", "error", "cols", "rows", "copyTextMessage", "copySuccessIcon", "showActionButton", "showClearButton", "showCopyIcon", "disableActionButton", "isActionButtonLoading", "actionButtonLabel", "clearAllButtonLabel", "onClickActionButton", "onClear", "onChange"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useState, useEffect, useRef } from 'react';
import PT from 'prop-types';
import CopyOutline from '@scaleflex/icons/copy-outline';
import { onClickByMouseDown } from '../../utils/functions/on-click-by-mouse-down';
import { intrinsicComponent, objectValues, useForkRef } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import { handleCopyIcon } from '../input/input.utils';
import { getIconSize } from '../button/button.utils';
import InputStyled from '../input/input.styles';
import { Size } from '../menu-item/types';
import Button from '../button';
import Styled from './textarea.styles';
var Textarea = intrinsicComponent(function (_ref, ref) {
  var _inputRef$current;
  var fullWidth = _ref.fullWidth,
    size = _ref.size,
    value = _ref.value,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    error = _ref.error,
    cols = _ref.cols,
    rows = _ref.rows,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? '' : _ref$copyTextMessage,
    copySuccessIcon = _ref.copySuccessIcon,
    _ref$showActionButton = _ref.showActionButton,
    showActionButton = _ref$showActionButton === void 0 ? false : _ref$showActionButton,
    _ref$showClearButton = _ref.showClearButton,
    showClearButton = _ref$showClearButton === void 0 ? false : _ref$showClearButton,
    _ref$showCopyIcon = _ref.showCopyIcon,
    showCopyIcon = _ref$showCopyIcon === void 0 ? false : _ref$showCopyIcon,
    _ref$disableActionBut = _ref.disableActionButton,
    disableActionButton = _ref$disableActionBut === void 0 ? false : _ref$disableActionBut,
    _ref$isActionButtonLo = _ref.isActionButtonLoading,
    isActionButtonLoading = _ref$isActionButtonLo === void 0 ? false : _ref$isActionButtonLo,
    actionButtonLabel = _ref.actionButtonLabel,
    clearAllButtonLabel = _ref.clearAllButtonLabel,
    onClickActionButton = _ref.onClickActionButton,
    onClear = _ref.onClear,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var inputRef = useRef(null);
  var textareaRef = useForkRef(inputRef, ref);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = useState({}),
    _useState4 = _slicedToArray(_useState3, 2),
    overflowStyles = _useState4[0],
    setOverflowStyles = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    showCopyMessage = _useState6[0],
    setShowCopyMessage = _useState6[1];
  var _useState7 = useState(value),
    _useState8 = _slicedToArray(_useState7, 2),
    inputValue = _useState8[0],
    setInputValue = _useState8[1];
  var actionButtonHandler = function actionButtonHandler(event) {
    if (onClickActionButton) {
      onClickActionButton(event);
    }
  };
  var clearAllHandler = function clearAllHandler(event) {
    setInputValue('');
    if (onClear) {
      onClear(event);
    }
  };
  var onChangeHandler = function onChangeHandler(event) {
    setInputValue(event.target.value);
    if (onChange) {
      onChange(event);
    }
  };
  var copyIconHandler = function copyIconHandler() {
    if (showCopyIcon) {
      handleCopyIcon(inputValue, setShowCopyMessage);
    }
  };
  useEffect(function () {
    var current = inputRef.current;
    if (current && current.scrollHeight > current.clientHeight) {
      setOverflowStyles({
        paddingRight: size === Size.Md ? '4px' : '0px'
      });
    }
  }, [(_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.scrollHeight, size]);
  useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  useEffect(function () {
    setInputValue(value);
  }, [value]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React.createElement(InputStyled.NotificationBox, {
      size: size,
      isTextarea: true
    }, /*#__PURE__*/React.createElement(InputStyled.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React.createElement(InputStyled.NotificationText, null, copyTextMessage));
  };
  return /*#__PURE__*/React.createElement(Styled.Textarea, {
    size: size,
    value: inputValue,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    readOnly: readOnly,
    disabled: disabled,
    fullWidth: Boolean(fullWidth),
    error: error,
    autoSize: Boolean(cols) || Boolean(rows)
  }, /*#__PURE__*/React.createElement(Styled.Base, _extends({}, rest, {
    value: inputValue,
    ref: textareaRef,
    size: size,
    onChange: onChangeHandler,
    readOnly: readOnly,
    disabled: disabled,
    style: _objectSpread({}, overflowStyles)
  })), (showActionButton || showClearButton || showCopyIcon) && /*#__PURE__*/React.createElement(Styled.ActionsButtonsWrapper, {
    size: size
  }, showActionButton && /*#__PURE__*/React.createElement(Button, {
    color: "link-primary",
    size: "sm",
    disabled: disableActionButton,
    loading: isActionButtonLoading,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, actionButtonHandler);
    }
  }, actionButtonLabel), showClearButton && /*#__PURE__*/React.createElement(Button, {
    color: "link-secondary",
    size: "sm",
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, clearAllHandler);
    }
  }, clearAllButtonLabel), showCopyIcon && /*#__PURE__*/React.createElement(Styled.CopyIcon, {
    showCopyIcon: isHovering && inputValue.length > 0,
    size: size,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, copyIconHandler);
    }
  }, /*#__PURE__*/React.createElement(CopyOutline, {
    size: getIconSize(size)
  }), showCopyMessage && renderCopyText())));
});
Textarea.defaultProps = {
  size: InputSize.Md,
  error: false,
  fullWidth: false,
  readOnly: false,
  disabled: false,
  disableActionButton: false,
  isActionButtonLoading: false,
  actionButtonLabel: 'Action',
  clearAllButtonLabel: 'Clear all'
};
export var propTypes = {
  error: PT.bool,
  readOnly: PT.bool,
  disabled: PT.bool,
  fullWidth: PT.bool,
  disableActionButton: PT.bool,
  isActionButtonLoading: PT.bool,
  value: PT.any,
  size: PT.oneOf(objectValues(InputSize)),
  copySuccessIcon: PT.oneOfType([PT.node, PT.func]),
  copyTextMessage: PT.string,
  cols: PT.number,
  rows: PT.number,
  showActionButton: PT.bool,
  showClearButton: PT.bool,
  showCopyIcon: PT.bool,
  actionButtonLabel: PT.string,
  clearAllButtonLabel: PT.string,
  onClickActionButton: PT.func,
  onClear: PT.func
};
Textarea.propTypes = propTypes;
export default Textarea;