import _defineProperty from "@babel/runtime/helpers/defineProperty";
import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { Color as PaletteColor } from '../../utils/types/palette';
import { Size } from './types';
var baseClassName = 'IconButtonTable';
var IconButtonTablePaddingMixin = _defineProperty(_defineProperty({}, Size.Sm, css(["padding:6px;"])), Size.Md, css(["padding:9px;"]));
var IconButtonTable = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-1mxz9yz-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size.Md : _ref$size,
    palette = _ref.theme.palette;
  return css(["display:flex;justify-content:center;align-items:center;cursor:pointer;border-radius:4px;", " color:", ";background:transparent;border:none;transition:all 100ms ease-out;&:hover{color:", ";background:", ";}&:active{color:", ";background:", ";}&:disabled{background-color:transparent;color:", ";cursor:default;}"], IconButtonTablePaddingMixin[size], palette[PaletteColor.IconsSecondary], palette[PaletteColor.IconsPrimary], palette[PaletteColor.BordersSecondary], palette[PaletteColor.IconsPrimaryHover], palette[PaletteColor.BordersItem], palette[PaletteColor.BordersDisabled]);
});
var Styled = applyDisplayNames({
  IconButtonTable: IconButtonTable
});
export default Styled;