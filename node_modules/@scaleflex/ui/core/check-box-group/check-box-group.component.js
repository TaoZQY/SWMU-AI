import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["size", "label", "checkBoxProps", "checkBoxGroupProps", "readOnly", "disabled", "labelPosition", "icon"];
import React, { useState, useRef } from 'react';
import PT from 'prop-types';
import { lightPalette } from '../../theme/roots/palette';
import { Color } from '../../utils/types/palette';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import CheckBox from '../check-box';
import Styled from './check-box-group.styles';
import { LabelPosition } from './types';
import { Size } from '../check-box/types';
import { getCheckboxInfoIconSize } from '../check-box/check-box.utils';
var CheckBoxGroup = intrinsicComponent(function (_ref, ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size.Sm : _ref$size,
    label = _ref.label,
    checkBoxProps = _ref.checkBoxProps,
    checkBoxGroupProps = _ref.checkBoxGroupProps,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    labelPosition = _ref.labelPosition,
    icon = _ref.icon,
    rest = _objectWithoutProperties(_ref, _excluded);
  var textRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isEllipsisActive = _useState2[0],
    setIsEllipsisActive = _useState2[1];
  var getTextTooltip = function getTextTooltip() {
    if (typeof label === 'string' && isEllipsisActive) {
      return label;
    }
  };
  var handleTextTooltip = function handleTextTooltip() {
    if (textRef.current !== null && textRef.current) {
      var _textRef$current, _textRef$current2;
      setIsEllipsisActive((textRef === null || textRef === void 0 || (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.offsetWidth) < (textRef === null || textRef === void 0 || (_textRef$current2 = textRef.current) === null || _textRef$current2 === void 0 ? void 0 : _textRef$current2.scrollWidth));
    }
  };
  var content = [/*#__PURE__*/React.createElement(CheckBox, _extends({
    size: size,
    key: "checkbox",
    checkBoxProps: checkBoxProps,
    disabled: disabled,
    readOnly: readOnly
  }, rest))];
  var labelContent = /*#__PURE__*/React.createElement(Styled.Label, {
    key: "label",
    title: getTextTooltip(),
    onMouseOver: handleTextTooltip,
    ref: textRef,
    disabled: Boolean(disabled),
    labelPosition: labelPosition,
    size: size
  }, label);
  if (labelPosition === 'before') {
    content.unshift(labelContent);
  } else {
    content.push(labelContent);
  }
  return /*#__PURE__*/React.createElement(Styled.CheckBoxGroup, _extends({
    icon: icon,
    disabled: disabled,
    ref: ref
  }, checkBoxGroupProps), content, typeof icon === 'function' ? icon({
    size: getCheckboxInfoIconSize(size),
    color: lightPalette[Color.IconsSecondary]
  }) : icon);
});
CheckBoxGroup.defaultProps = {
  checked: false,
  labelPosition: LabelPosition.After,
  size: Size.Sm
};
CheckBoxGroup.propTypes = {
  label: PT.string,
  checked: PT.bool,
  onChange: PT.func,
  // eslint-disable-next-line react/forbid-prop-types
  checkBoxProps: PT.object,
  readOnly: PT.bool,
  disabled: PT.bool,
  size: PT.oneOf(objectValues(Size)),
  labelPosition: PT.oneOf(objectValues(LabelPosition)),
  icon: PT.oneOfType([PT.node, PT.func])
};
export default CheckBoxGroup;