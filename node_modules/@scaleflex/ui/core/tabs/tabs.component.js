import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "value", "onChange"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import PT from 'prop-types';
import { intrinsicComponent } from '../../utils/functions';
import Styled from './tabs.styles';
var Tabs = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    value = _ref.value,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Styled.Tabs, _extends({
    ref: ref
  }, rest), React.Children.map(children, function (child, index) {
    var _child$type, _child$type2;
    var childValue = child.props.value || index;
    var active = value === childValue;
    return /*#__PURE__*/React.cloneElement(child, _objectSpread({
      onClick: function onClick(event) {
        if (typeof onChange === 'function' && !active) {
          onChange(childValue);
        }
        if (typeof child.props.onClick === 'function') {
          child.props.onClick(event);
        }
      }
    }, (child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'Tab' || (child === null || child === void 0 || (_child$type2 = child.type) === null || _child$type2 === void 0 ? void 0 : _child$type2.name) === 'Tab' ? {
      active: active
    } : {}));
  }));
});
Tabs.propTypes = {
  value: PT.oneOfType([PT.string, PT.number]),
  onChange: PT.func,
  children: PT.node
};
export default Tabs;