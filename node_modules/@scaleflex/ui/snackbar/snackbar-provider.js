import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"],
  _excluded2 = ["variant"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useState } from 'react';
import PT from 'prop-types';
import Popup from '@scaleflex/ui/core/popup';
import { MessageVariantStatusMatch, MessageVariant } from './types';
import SnackbarContext, { defaultProps } from './snackbar-context';

// Wrapper for SnackbarContext.Provider to be able to add <Popup /> and showMessage fn
function SnackbarProvider(_ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(_objectSpread(_objectSpread({}, defaultProps), rest)),
    _useState4 = _slicedToArray(_useState3, 2),
    options = _useState4[0],
    setOptions = _useState4[1];
  var handleShowMessage = function handleShowMessage() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? MessageVariant.Default : _ref2$variant,
      restOptions = _objectWithoutProperties(_ref2, _excluded2);
    setOptions(_objectSpread(_objectSpread(_objectSpread({}, defaultProps), rest), {}, {
      message: message,
      status: MessageVariantStatusMatch[variant]
    }, restOptions));
    setOpen(true);
  };
  return /*#__PURE__*/React.createElement(SnackbarContext.Provider, {
    value: _objectSpread(_objectSpread({}, options), {}, {
      showMessage: handleShowMessage
    })
  }, children, /*#__PURE__*/React.createElement(Popup, _extends({}, options, {
    open: open,
    onClose: function onClose() {
      return setOpen(false);
    }
  })));
}
SnackbarProvider.defaultProps = _objectSpread(_objectSpread({}, defaultProps), {}, {
  children: undefined
});
SnackbarProvider.propTypes = {
  children: PT.node
};
export default SnackbarProvider;